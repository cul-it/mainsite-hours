<?php

// $Id$

/**
 * @file
 * Module for displaying library hours for all libraries 
 * 
 * This is a heavily modified version of the libraryhours module written by John Fereira and
 * further developed by Jim Reidy.
 */

/**
 * Implementation of hook_init(). Used for three things:
 *    1. Sets the base URL of the library hours web serivce
 *    2. Creates a translation array of library names and abbreviations  
 *    3. Creates an array of active libraries (based on the Unit Library node type) with
 *       latitude, longitude, name, current open/close status, and today's hours for each entry.  
 */
function cul_hours_init() {
   global $host;
   //$host = 'http://victoria02.library.cornell.edu:8080';   # dev site
   $host = 'http://mannservices.mannlib.cornell.edu';
   
   // Load the module's CSS and JS files.
   // TODO: set these to only load on the library hours page
   $module_path = drupal_get_path('module', 'cul_hours');
   drupal_add_css($module_path . '/cul_hours.css');
   drupal_add_js($module_path . '/cul_hours.js'); 
global $base_url; 
   drupal_add_js(array('cul_hours' => array('module_path' => $base_url . '/' . drupal_get_path('module', 'cul_hours'))), 'setting');    
  // Map each library name to its abbreviation. The name is the name specified in the unit library
  // node, while the abbreviation identifies the library in the web services.
  global $abbrev_map;
  $abbrev_map = array('Africana Library' => 'Africana',
                    'Medical Center Archives' => 'Medical',
                    'Engineering Library' => 'ENGR',
                    'Olin Library' => 'OLIN',
                    'Geneva Experiment Station Library' => 'GENEVA',
                    'Industrial and Labor Relations Library' => 'ILR',
                    'Library Annex' => 'ANNEX',
                    'Entomology Library' => 'Entomology',
                    'Fine Arts Library' => 'Fine Arts',
                    'Hotel Library' => 'Hotel',
                    'Kroch Library, Division of Asia Collections' => 'Kroch',
                    'Kroch Library, Division of Rare & Manuscript Collections' => 'Rare',
                    'Law Library' => 'Law',
                    'Management Library' => 'JGSM',
                    'Mann Library' => 'MANNLIB',
                    'Mathematics Library' => 'MATH',
                    'Medical Library' => 'Medical',
                    'Physical Sciences Library (Edna McConnell Clark Library)' => 'PHYSCI',
                    'Uris Library' => 'Uris',
                    'Veterinary Library' => 'Vet',
                    'Ornithology Library' => 'Ornithology',
                    'Music Library' => 'Music'
                   ); 
   
   /************* Set up the main array of libraries with location and hours data ***************/              
   global $libs;
   $libs = array();
   // Initial query to retrieve list of unit library nodes
   $results = db_query("select title from {node} where type='unit_library' order by title");
   while ($data = db_fetch_object($results)) {
      // Secondary query to retrieve latitude and longitude for each library
      $r2 = db_query("select latitude, longitude from {location} where name='" . $data->title . "'");
      $d2 = db_fetch_object($r2);
      $libs[] = array("title" => $data->title,
                      "lat" => $d2->latitude,
                      "long" => $d2->longitude,
                      "open" => _cul_hours_isopen($data->title),     // Whether library is currently open
                      "today" => cul_hours_today($data->title)    // Today's hours
                 );
   }
   // Add the libs array to the system Javascript so that it can be manipulated directly
   drupal_add_js(array('libraryhours' => array('libs' => $libs)), 'setting'); 
}

/**
 * Determine whether the specified library is open currently.
 * $name = library name (as specified in the unit library's node)
 */
function _cul_hours_isopen($name) { 
   global $abbrev_map; 
   global $host;
   
   $name = trim($name);
   // Query the web service for current status
   $url = $host . "/LibServices/showLibraryHoursStatus.do?location=" .
          urlencode($abbrev_map[$name]) . "&date=" . date('Y-m-d') . 
          '&start=' . date('H:i:s') . "&end=" . date('H:i:s') . "&output=json";
   $hoursInfo = getLibraryHoursJson($url);
   if ($hoursInfo->String == "true") {
      return 1;
   }
   else {
      return NULL;
   }

}

/**
 * Implementation of hook_menu
 */
function cul_hours_menu() {
  $items['libraryhours'] = array(
   'page callback' => 'cul_hours_handle_ajax',
   'access callback' => TRUE,
   'type' => MENU_CALLBACK,
  );
  $items['libraryhours/about'] = array (
    'page callback' => 'cul_hours_about',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['libraryhours/hours'] = array (
    'page callback' => 'cul_hours_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['libraryhours/get/semester/%'] = array (
     'page callback' => 'cul_hours_handle_ajax',
     'access callback' => TRUE,
     'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Callback function to handle AJAX request to retrieve details about a specific library's hours
 */
function cul_hours_handle_ajax() {
   global $abbrev_map; 
   $location = $abbrev_map[arg(4)];  
   echo cul_hours_academicyear($location);   
}

/**
 * Callback function for information about this module
 */
function cul_hours_about() {
  return theme('cul_hours_about');
}

/**
 * Retrieve and theme hours for a specific library.
 * $name = library name (as specified in the unit library's node)
 */
function cul_hours_today($name) { 
   global $abbrev_map;
   global $host;
   
   $location = $abbrev_map[trim($name)]; 
   if (empty ($location)) {
      drupal_set_message("The location must be specified when requesting today's hours.");
      return '';
   } else {
      $url = $host . "/LibServices/showLibraryHoursToday.do?location=" . 
             urlencode($location) . "&output=json";
      $hoursInfo = getLibraryHoursJson($url);
      return theme_cul_hours_today($hoursInfo);
   }
}

/**
 * Return hours for a specific location and date (e.g., 'MANNLIB', '2011-12-12')
 * Setting $checkweight=TRUE returns only the 'weight' value from the $hoursInfo structure ...
 * whatever 'weight' means.
 */
function cul_hours_specificdate($location, $date, $checkweight=NULL) {
   global $host;
   if (empty ($location)) {
      drupal_set_message("The location must be specified when requesting the hours for a specific date");
      return '';
   } elseif (empty ($date)) {
      drupal_set_message("The date must be specified when requesting the hours for a specific date :)");
      return '';
   } else {
      $url = $host . "/LibServices/showLibraryHoursForDate.do?location=" . urlencode($location) . "&date=" . urlencode($date) . "&output=json";
      $hoursInfo = getLibraryHoursJson($url);
      if ($checkweight == TRUE) {
         return $hoursInfo->weight;
      } else {
         return $hoursInfo;
      }
   }
}

/**
 * Return themed HTML for the current academic semester for the given location.
 */

function cul_hours_academicsemester($location) {
   global $host;
   
   if (empty ($location)) {
      drupal_set_message("The location must be specified when requesting semester hours.");
      return '';
   } else {
      $url = $host . "/LibServices/showLibraryHoursForAcademicSemester.do?location=" . urlencode($location) . "&output=json";
      $academicSemesterHoursInfo = getLibraryHoursJson($url);
    
      return theme('cul_hours_academicsemester', $academicSemesterHoursInfo);
   }
}

/**
 * Return themed HTML for the current academic semester for the given location and year.
 * 'year' is actually an academic year and should be specified as such (e.g., '2011-2012').
 * If year=NULL, service defaults to current academic year.
 */
function cul_hours_academicyear($location, $year=NULL) {
   global $host;

   if (empty ($location)) {
      drupal_set_message("The location must be specified when requesting academic year hours.");
      return '';
   } else {
      if (empty ($year)) {
         $url = $host . "/LibServices/showLibraryHoursForAcademicYear.do?location=" . urlencode($location) . "&output=json";
      } else {
         $url = $host . "/LibServices/showLibraryHoursForAcademicYear.do?location=" . urlencode($location) . "&year=" .urlencode($year) . "&output=json";
      }
      $hoursInfo = getLibraryHoursJson($url);
      
      return theme('cul_hours_academicyear', $hoursInfo);
  }
}

/**
 * Implementation of hook_theme
 */
function cul_hours_theme() {
  return array (
    'cul_hours_about' => array (),
    'cul_hours_test' => array(),
    'cul_hours_today' => array (
      'arguments' => array (
        'hours' => NULL
      )
    ),
    'cul_hours_default' => array (
      'arguments' => array (
        'hoursPackage' => NULL
      )
    ),
    'cul_hours_exceptions' => array (
      'arguments' => array (
        'exceptionHoursList' => NULL
      )
    ),
    'cul_hours_academicsemester' => array (
      'arguments' => array (
        'academicSemesterHoursInfo' => NULL
      )
    ),
    'cul_hours_academicyear' => array (
      'arguments' => array (
        'hoursInfo' => NULL
      )
    ),

  );
}

/**
 * Display information about this module
 */
function theme_cul_hours_about() {
   $output .= '<h4>Library Hours Module</h4>';
   $output .= '<p>Outputs a page with hours information and interactive map for all CUL libraries.</p>';
   
   return $output;
}

/**
 * Theme opening and closing hours for today. Input is a $hoursInfo structure.
 */
function theme_cul_hours_today($hours) {
  
   $format = 'g:i a';
   $dayformat = 'l, F j, Y';
   if (empty ($hours)) {
      $output .= '<b>No Hours Available for this Location</b>';
   } else {   
      if ($hours->startTime == $hours->endTime) {
         $output .= '<strong>Closed</strong>';
      } else {
         $output .= 'Open ' . get_formatted_time($hours->startTime, $format) . ' - ' .
                     get_formatted_time($hours->endTime, $format) . '';
      }
   }
   
   return $output;
}

/**
 * theme default or regular hours
 * - modified to account for 24 hour openings & other locations -jgr25
 */
function theme_cul_hours_default($hoursPackage) {

   $timeformat = 'g:i a';
   $dateCompareFormat = 'Ymd';
   $dayList = $hoursPackage->dayList;
   $ndays = count($dayList);
  

   $output .= '<div class="regularHours">';
   $output .= '<ul class="libraryHours">';

   // check if today is an exception or regular hours
   // but only do this for the semester where today's date actually resides
   if (date($dateCompareFormat, $hoursPackage->fromDate) <= date($dateCompareFormat) &&
       date($dateCompareFormat, $hoursPackage->toDate)   >= date($dateCompareFormat)) {
      $today = date("y-m-d");
      $dayOfWeek = date("l");
  	   $location = $hoursPackage->locationName;
      $todaysWeight = cul_hours_specificdate($location, $today, TRUE);
   }

   foreach ($dayList as $day) {
      // highlight if today
      if ($todaysWeight && $day == $dayOfWeek) {
         $output .= '<li class="today">';
      } else {
         $output .= '<li>';
      }
      $output .= '<strong>' . $day . '</strong> ';
      $output .= '<span class="hours">';
      switch ($day) {
         case 'Monday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->sunOpen, $hoursPackage->sunClose,
   				$hoursPackage->monOpen, $hoursPackage->monClose,
   				$hoursPackage->tueOpen, $hoursPackage->tueClose);
   			break;
      	case 'Tuesday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->monOpen, $hoursPackage->monClose,
   				$hoursPackage->tueOpen, $hoursPackage->tueClose,
   				$hoursPackage->wedOpen, $hoursPackage->wedClose);
   			break;
      	case 'Wednesday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->tueOpen, $hoursPackage->tueClose,
   				$hoursPackage->wedOpen, $hoursPackage->wedClose,
   				$hoursPackage->thuOpen, $hoursPackage->thuClose);
   			break;
      	case 'Thursday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->wedOpen, $hoursPackage->wedClose,
   				$hoursPackage->thuOpen, $hoursPackage->thuClose,
   				$hoursPackage->friOpen, $hoursPackage->friClose);
   			break;
      	case 'Friday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->thuOpen, $hoursPackage->thuClose,
   				$hoursPackage->friOpen, $hoursPackage->friClose,
   				$hoursPackage->satOpen, $hoursPackage->satClose);
   			break;
      	case 'Saturday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->friOpen, $hoursPackage->friClose,
   				$hoursPackage->satOpen, $hoursPackage->satClose,
   				$hoursPackage->sunOpen, $hoursPackage->sunClose);
   			break;
      	case 'Sunday':
   			$output .= _cul_hours_format_default(
   				$hoursPackage->satOpen, $hoursPackage->satClose,
   				$hoursPackage->sunOpen, $hoursPackage->sunClose,
   				$hoursPackage->monOpen, $hoursPackage->monClose);
   			break;		
      }
   
      $output .= '</span>';
      
      // label if today
      if ($todaysWeight && $day == $dayOfWeek) {
         $output .= '<span class="today">today</span>';
      }
      $output .= '</li>';

   } // end displaying days
   $output .= '</ul>';
   $output .= '</div><!--regularHours-->'. "\n";
   
   return $output;
}

/**
 * theme exception hours list
 */
function theme_cul_hours_exceptions($exceptionHoursList) {
   $dayformat = 'l, M j';
   $monthDayFormat = 'F j';
   $yearFormat = 'Y';
   $timeformat = 'g:i a';
   $dateCompareFormat = 'Ymd';
   $current_exception_found = false;
   $exceptionoutput = '';

   foreach ($exceptionHoursList as $exceptionHoursInfo) {
      
      // strip year from tail end of packageName
      $exceptionName = substr($exceptionHoursInfo->packageName, 0, -5);
      
      $libraryHoursList = $exceptionHoursInfo->libraryHoursList;
      
      // check to see if the end date for the exception has already passed
      // only display exceptions that have not already passed
      if (date($dateCompareFormat, $exceptionHoursInfo->endDay) >= date($dateCompareFormat)) {
         $current_exception_found = TRUE;
         $exceptionoutput .= '<h5 class="hoursException">' . $exceptionName . '</h5>';
         $exceptionoutput .= '<ul class="libraryHours">';
         
         foreach ($libraryHoursList as $libraryHours) {
            // check to see if this specific day in the exception has already passed
            // only display exception days that have not already passed
            if (date($dateCompareFormat, $libraryHours->day) >= date($dateCompareFormat)) {
               // check to see if the exception is actually today
               if (date($dateCompareFormat, $libraryHours->day) == date($dateCompareFormat)) {
                  // if so, then let's highlight it
                  $exceptionoutput .= '<li class="today">';
               } else {
                  $exceptionoutput .= '<li>';
               }
               
               $exceptionoutput .= get_formatted_time($libraryHours->day, $dayformat);
               $exceptionoutput .= ' <span class="hours">';
               
               if ($libraryHours->startTime == $libraryHours->endTime) {
                  $exceptionoutput .= '<strong class="closed">Closed</strong>';
               } else {
                  $exceptionoutput .= get_formatted_time($libraryHours->startTime, $timeformat) . 
                              ' - ' . get_formatted_time($libraryHours->endTime, $timeformat);
               }
               $exceptionoutput .= '</span>';
               
               // check to see if the exception is actually today
               if (date($dateCompareFormat, $libraryHours->day) == date($dateCompareFormat)) {
                  // if so, then let's label it as today's hours
                  $exceptionoutput .= '<span class="today">today</span>';
               }
               $exceptionoutput .= '</li>';
            } // end if this specific day in the exception has already passed
         }  //end foreach $libraryHoursList
         
         $exceptionoutput .= '</ul>';
      }  // end if this set of exceptions has not already passed
   } // end foreach $exceptionHoursList
   
   $output .= '<div class="exceptions">';
   if ($current_exception_found) {
      $output .= '<h4>Exceptions</h4>';
      $output .= $exceptionoutput;
   } else {
      $output .= '<!-- no current exceptions -->';
   }
   $output .= '</div><!-- exceptions -->';
  
   return $output;
}

/**
 * theme hours for an academic semester or winter/summer
 * session...uses cul_hours_default and cul_hours_exceptions
 * themes
 */
function theme_cul_hours_academicsemester($academicSemesterHoursInfo) {
   
   if (empty ($academicSemesterHoursInfo)) {
      $output .= '<p>No Hours Available for this Location</p>';
   } else {
      $hoursPackage = $academicSemesterHoursInfo->semesterHoursPackage;
      
      // strip year from tail end of packageName
      $semesterName = substr($hoursPackage->packageName, 0, -5);
      
      $fromDate = $hoursPackage->fromDate;
      $toDate = $hoursPackage->toDate;
      $dateCompareFormat = 'Ymd';
      $monthDayFormat = 'F j';
      $yearFormat = 'Y';

      // check to see if the end date for the semester has already passed
      // only display semesters that have not already passed
      if (date($dateCompareFormat, $toDate) >= date($dateCompareFormat)) {
         // display semester hours header
         $output .= '<div class="semesterHours">';
         $output .= '<h3>' . $semesterName . ' <em class="dateRange">' . 
                     get_formatted_time($fromDate, $monthDayFormat) . ' - ' . 
                     get_formatted_time($toDate, $monthDayFormat) . ', ' .   
                     get_formatted_date($toDate, $yearFormat) . '</em></h3>';

         // Now start displaying the regular and exception hours
         $exceptionHoursList = $academicSemesterHoursInfo->exceptionHoursList;
         if ($exceptionHoursList) {
            $lastException = array_slice($exceptionHoursList, -1);
            
            foreach ($lastException as $exceptionHoursInfo) {
               // check to see if we're currently in the last exception for any given semester
               if (date($dateCompareFormat, $exceptionHoursInfo->startDay) <= 
                   date($dateCompareFormat)) { 
                  if (!empty ($exceptionHoursList)) {
                     // default hours no longer apply, so display exceptions only
                     // TODO: this logic doesn't follow. Why assume that there isn't a time period
                     // with default hours after the end of the last exception?!
                     $exceptionHours = theme('cul_hours_exceptions', $exceptionHoursList);
                     $output .= $exceptionHours;
                  }
               } else { 
                  // display default hours first, then exceptions
                  $output .= theme('cul_hours_default', $hoursPackage);
                  if (!empty ($exceptionHoursList)) {
                     $exceptionHours = theme('cul_hours_exceptions', $exceptionHoursList);
                     $output .= $exceptionHours;
                  }
               }
            }
         }
         else {
            // No exceptions, just show default hours
            $output .= theme('cul_hours_default', $hoursPackage);
         }
      
         $output .= '</div><!--semesterHours-->'. "\n";
      }
   }
   
   return $output;
}

/**
 * theme hours for an academic year. Just iterate through
 * each semester/session in the year and call the
 * cul_hours_academicsemester theme function
 */
function theme_cul_hours_academicyear($hoursInfo) {
  
   if (empty ($hoursInfo)) {
      $output .= '<p>No Hours Available for this Location</p>';
   } else {
      $numSemesters = count($hoursInfo->academicSemesterList);
      $i = 1;
      foreach ($hoursInfo->academicSemesterList as $academicSemesterHoursInfo) {
         $output .= theme('cul_hours_academicsemester', $academicSemesterHoursInfo);
         $hoursPackage = $academicSemesterHoursInfo->semesterHoursPackage;
      
         // strip year from tail end of packageName
         $semesterName = substr($hoursPackage->packageName, 0, -5);
         
         $fromDate = $hoursPackage->fromDate;
         $dateCompareFormat = 'Ymd';
      
         // check to see if we've already entered the Summer Session
         // if so, let's include the hours for the following academic year
         if ($i == $numSemesters) {
            if (date($dateCompareFormat, $fromDate) <= date($dateCompareFormat)) {
               $location = $hoursPackage->locationName;
               $currentSummerYear = date("Y", $fromDate);
               $followingYear = $currentSummerYear + 1;
               $nextAcademicYear = $currentSummerYear . '-' . $followingYear;
               $output .= cul_hours_academicyear($location, $nextAcademicYear);
            }
         }
         $i++;
      }
   }
   
   return $output;
}

/**
 * Implementation of hook_help()
 */
function cul_hours_help($path, $arg) {
  if ($path == 'admin/help#libraryhours') {
    $txt = 'The Library Hours module displays information about Library Hours';
    return '<p>' . t($txt) . '</p>';
  }
}

/* END HOOKS */

/**
 * fetch json given a url
 *
 * @param $url
 * @return json
 */
function getLibraryHoursJson($url) {
   
   $http_result = drupal_http_request($url);
   if ($http_result->code == 200) {
      $data = $http_result->data;
      $c = json_decode($data);
      if (empty ($c)) {
         drupal_set_message("Unable to decode json from library hours service");
      }
      return $c;
   } else { // Otherwise we don't have any data
      return '';
   }
}

/**
 * return a formatted date given a date object and
 * formatting string
 */
function get_formatted_date($u, $fmt) {
   
   $local_timezone = date_default_timezone_get();
   $d = date_make_date($u, $local_timezone, DATE_UNIX);
   $formatted_date = date_format_date($d, 'custom', $fmt);
   
   return $formatted_date;
}

/**
 * return a formatted time given a date object and
 * formatting string
 */
function get_formatted_time($u, $fmt) {
  
   $formattedTime = date($fmt, $u);
   if ($formattedTime == "12:00 am") {
      $formattedTime = "Midnight";
   } elseif ($formattedTime == "12:00 pm") {
      $formattedTime = "Noon";
   }
  
   return $formattedTime;
}

/**
 * special case formatting for Closed or Open All Day -jgr25
 */
function _cul_hours_special_timespan($openTime, $closeTime, $timeformat) {
	$output = '';
	if ($openTime == $closeTime) {
		$open = get_formatted_time($openTime, $timeformat);
		if ($open == "Midnight") {
			// special case: open and close at 12:00 AM means open all day
			$output = 'OPEN 24 HOURS';
			}
		else {
			// special case open and close at same time means closed all day
			$output = 'Closed';
			}
		}
	return $output;
	}	
	

/**
 * special case formatting for default times -jgr25
 */
function _cul_hours_format_default(
   $prevOpen, $prevClose,	// previous day open close
   $thisOpen, $thisClose,	// current day open close
   $nextOpen, $nextClose	// next day open close
	) {
	
   $output = '';			
   $hours = (object) array('startTime' => $thisOpen, 'endTime' => $thisClose);
   if (_cul_hours_open_all_day($hours)) {
      $output = t('OPEN 24 HOURS');
	}
	else if (_cul_hours_closed_all_day($hours)) {
		$output = t('Closed');
	}
	else {
		$timeformat = 'g:i a';
		$start = get_formatted_time($hours->startTime, $timeformat);
		$end = get_formatted_time($hours->endTime, $timeformat);
		
		if ($start == 'Midnight') {
         // see if it was open 24 hours the day before
			$prevHours = (object) array('startTime' => $prevOpen, 'endTime' => $prevClose);
			if (_cul_hours_open_all_day($prevHours)) {
				// starting at Midnight after being open all day the day before
				$output = t('Closes at @time', array('@time' => $end));
				}			
		}
		else if ($end == 'Midnight') {
			// see if it will be open 24 the next day
			$nextHours = (object) array('startTime' => $nextOpen, 'endTime' => $nextClose);
			if (_cul_hours_open_all_day($nextHours)) {
				// ending at Midnight before being open all day the next day
				$output = t('Opens at @time', array('@time' => $start));
			}
		}
		
		if (empty($output)) {
			// normal situation with open and close times
			$output = t('@start - @finish', array('@start' => $start, '@finish' => $end));
		}
	}
	
	return $output;
}


/**
 * check for special case of open 24 hours. If startTime == endTime == Midnight, then open all day.
 * (This is a hack to get around the lack of an 'open all day' flag in the hours service.)
 */
function _cul_hours_open_all_day($hours) {

	if ($hours->startTime == $hours->endTime) {
		$end = get_formatted_time($hours->endTime, 'g:i a');
		if ($end == "Midnight") {
			// start and end at Midnight (12 am) indicates open 24 hours
			return TRUE;
		}
	}

	return FALSE;
}


/**
 * check for special case of closed all day. If startTime == endTime != Midnight, then closed all day.
 * (This is a hack to get around the lack of a 'closed all day' flag in the hours service.)
 */
function _cul_hours_closed_all_day($hours) {

	if ($hours->startTime == $hours->endTime) {
		if (!_cul_hours_open_all_day($hours)) {
			// start and end at any time other than Midnight indicates closed all day
			return TRUE;
		}
	}

	return FALSE;
}

function cul_hours_test() {
   
   drupal_set_title('Library Hours');
   return theme('cul_hours_test');
  
}

/*
 * Theme the main CUL hours and maps display.
 */
function theme_cul_hours_test() {
   
   global $libs;
   
   // Create the header and start the table
   $today = date('l, F d, Y');
   $output .= "<h2 class='hours'><span id='htitle'>Today's Hours – $today</span></h2><table class='hourstable'>";
   $output .= "<span id='showOption' style='text-align:center'><button type='button'>Show only what's open</button></span><span id='showNote'></span>";
   
   // Create the table of today's hours with links
   $table_content = '<tbody class="hourscontent">';
   for ($i = 0; $i < count($libs); $i++) {      
      $t1 = $libs[$i]['title'];
      $t1string = $t1 . '<br/>' . '<span class="today">' . $libs[$i]['today'] . '</span>';
      $t1class = ($libs[$i]['open'] ? "open" : "closed");
      $table_content .= "<tr><td class='$t1class' onclick=\"centerMap('$t1');\">" . $t1string . "</td>" ;
   }

   $table_content .= "</tbody></table>";
   $output .= $table_content;
   
   // Add the details div
   $output .= '<div id="details"><span class="hoursprompt">Click on a location from the list at the left to see the full semester schedule.</span></div>';

   // Add the iframe for the campus map
   $output .= '
      <div id="outerdiv">
      <iframe id="campusmap" src="http://www.cornell.edu/maps/gmap.cfm?iframe=1&hideLocList=1&hideDir=1&hideOverlays=1&zoom=15" width="50%" height="550" frameborder="0"><p>The map is not appearing because the web browser in use does not support iframes.</p></iframe>
      </div>';
      
   return $output;
}