<?php

// $Id$

/**
 * @file
 * Module for displaying library hours for all libraries
 *
 * This is a heavily modified version of the libraryhours module written by John Fereira and
 * further developed by Jim Reidy.
 */

/**
 * Implements hook_init(). Used for three things:().
 *    1. Sets the base URL of the library hours web serivce
 *    2. Creates a translation array of library names and abbreviations
 *    3. Creates an array of active libraries (based on the Unit Library node type) with
 *       latitude, longitude, name, current open/close status, and today's hours for each entry.
 */
function cul_hours_init() {
  global $host;
  global $base_url;

  //$host = 'http://victoria02.library.cornell.edu:8080';   # dev site
  $host = 'http://mannservices.mannlib.cornell.edu';

  // Load the module's CSS and JS files.
  // TODO: set these to only load on the library hours page
  $module_path = drupal_get_path('module', 'cul_hours');

  if ($_GET['q'] == 'hours') {
    drupal_add_css($module_path . '/cul_hours.css');
    drupal_add_js($module_path . '/cul_hours.js');
  }
  drupal_add_js(array('cul_hours' => array('module_path' => $base_url . '/' . drupal_get_path('module', 'cul_hours'))), array('type' => 'setting', 'scope' => JS_DEFAULT)); // The path to the module must be passed into Javascript so that
  // a URL to the image resource can be used to create a custom overlay
  // on the CU campus map.

  // Map each library name to its abbreviation. The name is the name specified in the unit library
  // node, while the abbreviation identifies the library in the web services.
  global $abbrev_map;
  $abbrev_map = array(
    'Africana Library' => 'Africana',

    //     'Medical Center Archives' => 'Medical',
    'Engineering Library' => 'ENGR',
    'Olin Library' => 'OLIN',
    'Geneva Experiment Station Library' => 'GENEVA',
    'Industrial and Labor Relations Library' => 'ILR',
    'ILR Library' => 'ILR',
    'Library Annex' => 'ANNEX',

    //     'Entomology Library' => 'Entomology',
    'Fine Arts Library' => 'Fine Arts',
    'Hotel Library' => 'Hotel',
    'Kroch Library, Division of Asia Collections' => 'Kroch',
    'Kroch Library, Division of Rare & Manuscript Collections' => 'Rare',
    'Kroch Library, Division of Rare and Manuscript Collections' => 'Rare',
    'Law Library' => 'Law',
    'Management Library' => 'JGSM',
    'Mann Library' => 'MANNLIB',
    'Mathematics Library' => 'MATH',

    //      'Medical Library' => 'Medical',
    'Physical Sciences Library (Edna McConnell Clark Library)' => 'PHYSCI',
    'Uris Library' => 'Uris',
    'Veterinary Library' => 'Vet',
    'Ornithology Library' => 'Ornithology',
    'Music Library' => 'Music',
  );

  /************* Set up the main array of libraries with location and hours data ***************/
  global $libs;
  $libs = array();
  $cul_map_names = array();

  // Initial query to retrieve list of unit library nodes
  $results = db_query("select title from {node} where type='unit_library' order by title");
  while ($data = $results->fetchAssoc()) {
    // Secondary query to retrieve latitude and longitude for each library
    // TODO Please convert this statement to the D7 database API syntax.
    //$r2 = db_query("select latitude, longitude from {location} where name='" . $data->title . "'");
    //$d2 = db_fetch_object($r2);
    $r2 = db_query("select latitude, longitude from {location} where name = :title",
      array(':title' => $data['title']));
    $d2 = $r2->fetchAssoc();

    // HACK: let's ignore the Medical School library resources because we never update their hours
    // anyway...
    // Also ignoring the Entomology library now that it's closed
    /*
     * TODO: The idea of populating the hours list from the unit library nodes list
     * isn't really working. There are too many exceptions. Probably better to switch
     * to either a hard-coded or a configurable list!
     */
    $title = $data['title'];
    if ($title == 'Medical Library' or $title == 'Medical Center Archives' or $title == 'Entomology Library') {
      continue;
    }

    // HACK: Special request from ILR...
    if ($title == 'Industrial and Labor Relations Library') {
      $title = 'ILR Library';
    }

    $libs[] = array(
      "title" => $title,
      "lat" => $d2['latitude'],
      "long" => $d2['longitude'],
      "open" => _cul_hours_isopen($title), // Whether library is currently open
      "today" => cul_hours_today($title), // Today's hours
    );

    // We also need a slightly different naming scheme for the campus map, unfortunately
    // // HACK:
    // foreach ($libs as &$lib) {
    //   $cul_map_names[$lib['title']] = trim($lib['title']); // Most of the names are the same

    //   // Second hack: custom 'today' text for virtual libraries
    //   if ($lib['title'] == 'Engineering Library') {
    //     $lib['today'] = '24/7 Study Space and Computing Only';
    //     $lib['open'] = true;
    //   }
    //   elseif ($lib['title'] == 'Physical Sciences Library (Edna McConnell Clark Library)') {
    //     $lib['today'] = '24/7 Quiet Study Space Only';
    //     $lib['open'] = true;
    //   }
    // }
    // HACK: modify library names in order to obtain the correct search results on the CU map
    //  $cul_map_names['Entomology Library'] = 'Comstock Hall';
    // $cul_map_names['Africana Library '] = 'Africana';
    // $cul_map_names['Ornithology Library'] = 'Ornithology';
    // $cul_map_names['Physical Sciences Library (Edna McConnell Clark Library)'] = 'Clark Hall';
    // $cul_map_names['Kroch Library, Division of Rare and Manuscript Collections'] = 'Olin Library';
    // $cul_map_names['Kroch Library, Division of Asia Collections'] = 'Olin Library';
    // $cul_map_names['Geneva Experiment Station Library'] = 'Jordan Hall';
    // $cul_map_names['ILR Library'] = 'Ives Hall';

    // // Extra hack-ish: an update to the CUL maps started generating errors on
    // // the locations not hacked above....
    // $cul_map_names['Engineering Library'] = 'Carpenter Hall';
    // $cul_map_names['Fine Arts Library'] = 'Rand Hall';
    // $cul_map_names['Hotel Library'] = 'Statler Hall';
    // $cul_map_names['Law Library'] = 'Myron Taylor Hall';
    // $cul_map_names['Management Library'] = 'Sage Hall';
    // $cul_map_names['Mathematics Library'] = 'Malott Hall';
    // $cul_map_names['Music Library'] = 'Lincoln Hall';
    // $cul_map_names['Veterinary Library'] = 'Vet';
  }
  // Add the libs array to the system Javascript so that it can be manipulated directly
  drupal_add_js(array('cul_hours' => array('libs' => $libs, 'name_map' => $cul_map_names)), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * Implements hook_exit().
 */
function cul_hours_exit() {
  // We've been having trouble with the hours display not updating properly because (I think)
  // the display is being cached. This should force the cached page to clear at the end of
  // every request.
  global $base_url;
  $url_pos = strpos($_GET['q'], 'hours');
  if ($url_pos !== FALSE) { // TODO: can we get rid of the hardcoded 'libraryhours'?
    cache_clear_all($base_url . '/' . $_GET['q'], 'cache_page');
  }
}

/**
 * Determine whether the specified library is open currently.
 * $name = library name (as specified in the unit library's node)
 */
function _cul_hours_isopen($name) {
  global $abbrev_map;
  global $host;

  $name = trim($name);
  // Query the web service for current status
  $url = $host . "/LibServices/showLibraryHoursStatus.do?location=" . urlencode($abbrev_map[$name]) . "&date=" . date('Y-m-d') . '&start=' . date('H:i:s') . "&end=" . date('H:i:s') . "&output=json";

  $hoursInfo = getLibraryHoursJson($url);
  if (!empty($hoursInfo) && $hoursInfo->String == "true") {
    return 1;
  }
  else {
    return NULL;
  }

}

/**
 * Implements hook_menu().
 */
function cul_hours_menu() {

  //  $items['libraryhours'] = array(
  //   'page callback' => 'cul_hours_handle_ajax',
  //   'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  //  );
  $items['hours/about'] = array(
    'page callback' => 'cul_hours_about',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // $items['hours'] = array(
  //   'page callback' => 'cul_hours_test',
  //   'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );
  $items['hours/get/semester/%'] = array(
    'page callback' => 'cul_hours_handle_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Callback function to handle AJAX request to retrieve details about a specific library's hours
 */
function cul_hours_handle_ajax() {
  global $abbrev_map;
  $location = $abbrev_map[arg(3)];

  // HACK: special messages for the virtual libraries (again)
  if ($location == 'PHYSCI') {
    echo '24/7 study space is available in Clark Hall.';
  }
  elseif ($location == 'ENGR') {
    echo '24/7 study space is available in Carpenter Hall.';
  }
  else {
    echo cul_hours_academicyear($location);
  }
  exit(0);
}

/**
 * Callback function for information about this module
 */
function cul_hours_about() {
  return theme('cul_hours_about');
}

/**
 * Retrieve and theme hours for a specific library.
 * $name = library name (as specified in the unit library's node)
 */
function cul_hours_today($name) {
  global $abbrev_map;
  global $host;

  $location = $abbrev_map[trim($name)];
  if (empty($location)) {
    drupal_set_message("The location must be specified when requesting today's hours.");
    return '';
  }
  else {
    $url = $host . "/LibServices/showLibraryHoursToday.do?location=" . urlencode($location) . "&output=json";
    $hoursInfo = getLibraryHoursJson($url);
    return theme_cul_hours_today($hoursInfo);
  }
}

/**
 * Return hours for a specific location and date (e.g., 'MANNLIB', '2011-12-12')
 * Setting $checkweight=TRUE returns only the 'weight' value from the $hoursInfo structure ...
 * whatever 'weight' means.
 */
function cul_hours_specificdate($location, $date, $checkweight = NULL) {
  global $host;
  if (empty($location)) {
    drupal_set_message("The location must be specified when requesting the hours for a specific date");
    return '';
  }
  elseif (empty($date)) {
    drupal_set_message("The date must be specified when requesting the hours for a specific date :)");
    return '';
  }
  else {
    $url = $host . "/LibServices/showLibraryHoursForDate.do?location=" . urlencode($location) . "&date=" . urlencode($date) . "&output=json";
    $hoursInfo = getLibraryHoursJson($url);
    if ($checkweight == TRUE && isset($hoursInfo)) {
      return $hoursInfo->weight;
    }
    else {
      return $hoursInfo;
    }
  }
}

/**
 * Return themed HTML for the current academic semester for the given location.
 */
function cul_hours_academicsemester($location) {
  global $host;

  if (empty($location)) {
    drupal_set_message("The location must be specified when requesting semester hours.");
    return '';
  }
  else {
    $url = $host . "/LibServices/showLibraryHoursForAcademicSemester.do?location=" . htmlspecialcharacters(urlencode($location)) . "&output=json";
    $academicSemesterHoursInfo = getLibraryHoursJson($url);

    return theme('cul_hours_academicsemester', array('academicSemesterHoursInfo' => $academicSemesterHoursInfo));
  }
}

/**
 * Return themed HTML for the current academic year for the given location and year.
 * 'year' is actually an academic year and should be specified as such (e.g., '2011-2012').
 * If year=NULL, service defaults to current academic year.
 */
function cul_hours_academicyear($location, $year = NULL) {
  global $host;

  if (empty($location)) {
    drupal_set_message("The location must be specified when requesting academic year hours.");
    return '';
  }
  else {
    if (empty($year)) {
      $url = $host . "/LibServices/showLibraryHoursForAcademicYear.do?location=" . urlencode($location) . "&output=json";
    }
    else {
      $url = $host . "/LibServices/showLibraryHoursForAcademicYear.do?location=" . urlencode($location) . "&year=" . urlencode($year) . "&output=json";
    }
    $hoursInfo = getLibraryHoursJson($url);

    return theme('cul_hours_academicyear', array('hoursInfo' => $hoursInfo));
  }
}

/**
 * Implements hook_theme().
 */
function cul_hours_theme() {
  return array(
    'cul_hours_about' => array(),
    'cul_hours_test' => array(),
    'cul_hours_today' => array(
      'variables' => array(
        'hours' => NULL,
      ),
    ),
    'cul_hours_default' => array(
      'variables' => array(
        'hoursPackage' => NULL,
      ),
    ),
    'cul_hours_exceptions' => array(
      'variables' => array(
        'exceptionHoursList' => NULL,
      ),
    ),
    'cul_hours_academicsemester' => array(
      'variables' => array(
        'academicSemesterHoursInfo' => NULL,
      ),
    ),
    'cul_hours_academicyear' => array(
      'variables' => array(
        'hoursInfo' => NULL,
      ),
    ),
    'cul_hours_formatter_cul_hours_field_hours_id' => array(
      'variables' => array(
        'element' => NULL,
      ),
    ),
  );
}

/**
 * Display information about this module
 */
function theme_cul_hours_about() {
  $output .= '<h4>Library Hours Module</h4>';
  $output .= '<p>Outputs a page with hours information and interactive map for all CUL libraries.</p>';

  return $output;
}

/**
 * Theme opening and closing hours for today. Input is a $hoursInfo structure.
 */
function theme_cul_hours_today($variables) {
  $hours = $variables;
  $format = 'g:i a';
  $dayformat = 'l, F j, Y';
  $output = '';
  if (empty($hours)) {
    $output .= '<b>No Hours Available for this Location</b>';
  }
  else {
    if ($hours->override == 1) {
      $output .= '<strong>Open 24 hours</strong>';
    }
    elseif ($hours->override == 2) {
      $output .= '<strong>Closed</strong>';
    }
    else {
      $output .= 'Open ' . get_formatted_time($hours->startTime, $format) . ' - ' . get_formatted_time($hours->endTime, $format) . '';
      if ($hours->note) {
        $output .= '<br/>' . $hours->note . '<br/>';
      }
    }
  }

  return $output;
}

/**
 * theme default or regular hours
 * - modified to account for 24 hour openings & other locations -jgr25
 */
function theme_cul_hours_default($variables) {

  $output = '';
  $hoursPackage = $variables;
  $timeformat = 'g:i a';
  $dateCompareFormat = 'Ymd';
  $dayList = $hoursPackage['hoursPackage']->dayList;
  $ndays = count($dayList);
  $hoursPackage = $hoursPackage['hoursPackage'];


  $output .= '<div class="regularHours">';
  $output .= '<ul class="libraryHours">';

  // check if today is an exception or regular hours
  // but only do this for the semester where today's date actually resides
  if (date($dateCompareFormat, $hoursPackage->fromDate) <= date($dateCompareFormat) && date($dateCompareFormat, $hoursPackage->toDate) >= date($dateCompareFormat)) {
    $today = date("y-m-d");
    $dayOfWeek = date("l");
    $location = $hoursPackage->locationName;
    $todaysWeight = cul_hours_specificdate($location, $today, TRUE);
  }

  foreach ($dayList as $day) {
    // highlight if today
    if ($todaysWeight && $day == $dayOfWeek) {
      $output .= '<li class="today">';
    }
    else {
      $output .= '<li>';
    }
    $output .= '<strong>' . $day . '</strong> ';
    $output .= '<span class="hours">';

    switch ($day) {
      case 'Monday':
        $output .= _cul_hours_format_default($hoursPackage->sunOpen, $hoursPackage->sunClose, $hoursPackage->sunOverride, $hoursPackage->monOpen, $hoursPackage->monClose, $hoursPackage->monOverride, $hoursPackage->tueOpen, $hoursPackage->tueClose, $hoursPackage->tueOverride);
        break;
      case 'Tuesday':
        $output .= _cul_hours_format_default($hoursPackage->monOpen, $hoursPackage->monClose, $hoursPackage->monOverride, $hoursPackage->tueOpen, $hoursPackage->tueClose, $hoursPackage->tueOverride, $hoursPackage->wedOpen, $hoursPackage->wedClose, $hoursPackage->wedOverride);
        break;
      case 'Wednesday':
        $output .= _cul_hours_format_default($hoursPackage->tueOpen, $hoursPackage->tueClose, $hoursPackage->tueOverride, $hoursPackage->wedOpen, $hoursPackage->wedClose, $hoursPackage->wedOverride, $hoursPackage->thuOpen, $hoursPackage->thuClose, $hoursPackage->thuOverride);
        break;
      case 'Thursday':
        $output .= _cul_hours_format_default($hoursPackage->wedOpen, $hoursPackage->wedClose, $hoursPackage->wedOverride, $hoursPackage->thuOpen, $hoursPackage->thuClose, $hoursPackage->thuOverride, $hoursPackage->friOpen, $hoursPackage->friClose, $hoursPackage->friOverride);
        break;
      case 'Friday':
        $output .= _cul_hours_format_default($hoursPackage->thuOpen, $hoursPackage->thuClose, $hoursPackage->thuOverride, $hoursPackage->friOpen, $hoursPackage->friClose, $hoursPackage->friOverride, $hoursPackage->satOpen, $hoursPackage->satClose, $hoursPackage->satOverride);
        break;
      case 'Saturday':
        $output .= _cul_hours_format_default($hoursPackage->friOpen, $hoursPackage->friClose, $hoursPackage->friOverride, $hoursPackage->satOpen, $hoursPackage->satClose, $hoursPackage->satOverride, $hoursPackage->sunOpen, $hoursPackage->sunClose, $hoursPackage->sunOverride);
        break;
      case 'Sunday':
        $output .= _cul_hours_format_default($hoursPackage->satOpen, $hoursPackage->satClose, $hoursPackage->satOverride, $hoursPackage->sunOpen, $hoursPackage->sunClose, $hoursPackage->sunOverride, $hoursPackage->monOpen, $hoursPackage->monClose, $hoursPackage->monOverride);
        break;
    }

    $output .= '</span>';

    // label if today
    if (isset($todaysWeight) && $day == $dayOfWeek) {
      $output .= '<span class="today">today</span>';
    }
    $output .= '</li>';

  } // end foreach day
  $output .= '</ul>';

  // Add any notes
  if ($hoursPackage->note) {
    $output .= '<span class="hoursnote">' . $hoursPackage->note . '</span><br/>';
  }

  $output .= '</div><!--regularHours-->' . "\n";

  return $output;
}

/**
 * theme exception hours list
 */
function theme_cul_hours_exceptions($variables) {
  $exceptionHoursList = $variables['exceptionHoursList'];
  $dayformat = 'l, M j';
  $monthDayFormat = 'F j';
  $yearFormat = 'Y';
  $timeformat = 'g:i a';
  $dateCompareFormat = 'Ymd';
  $current_exception_found = false;
  $exceptionoutput = '';
  $output = '';

  foreach ($exceptionHoursList as $exceptionHoursInfo) {

    // strip year from tail end of packageName
    //$exceptionName = substr($exceptionHoursInfo->packageName, 0, -5);

    $exceptionName = $exceptionHoursInfo->packageName;

    $libraryHoursList = $exceptionHoursInfo->libraryHoursList;

    // check to see if the end date for the exception has already passed
    // only display exceptions that have not already passed
    if (date($dateCompareFormat, $exceptionHoursInfo->endDay) >= date($dateCompareFormat)) {
      $current_exception_found = TRUE;
      $exceptionoutput .= '<h5 class="hoursException">' . $exceptionName . '</h5>';
      $exceptionoutput .= '<ul class="libraryHours">';

      foreach ($libraryHoursList as $libraryHours) {
        // check to see if this specific day in the exception has already passed
        // only display exception days that have not already passed
        if (date($dateCompareFormat, $libraryHours->day) >= date($dateCompareFormat)) {
          // check to see if the exception is actually today
          if (date($dateCompareFormat, $libraryHours->day) == date($dateCompareFormat)) {
            // if so, then let's highlight it
            $exceptionoutput .= '<li class="today">';
          }
          else {
            $exceptionoutput .= '<li>';
          }

          $exceptionoutput .= '<strong>' . get_formatted_time($libraryHours->day, $dayformat) . '</strong> &nbsp;&nbsp;';
          $exceptionoutput .= '<span class="hours">';

          if ($libraryHours->override == 1) {
            $exceptionoutput .= '<strong>Open 24 hours</strong>';
          }
          elseif ($libraryHours->override == 2) {
            $exceptionoutput .= 'CLOSED';
          }
          else {
            $exceptionoutput .= get_formatted_time($libraryHours->startTime, $timeformat) . ' - ' . get_formatted_time($libraryHours->endTime, $timeformat);
          }
          $exceptionoutput .= '</span>';

          // check to see if the exception is actually today
          if (date($dateCompareFormat, $libraryHours->day) == date($dateCompareFormat)) {
            // if so, then let's label it as today's hours
            $exceptionoutput .= '<span class="today">  today</span>';
          }
          $exceptionoutput .= '</li>';
        } // end if this specific day in the exception has already passed
      } //end foreach $libraryHoursList

      $exceptionoutput .= '</ul>';

      // Add a note if there is one
      if ($libraryHours->note) {
        $exceptionoutput .= '<span class="hoursnote">NOTE: ' . $libraryHours->note . '</span><br/>';
      }

    } // end if this set of exceptions has not already passed
  } // end foreach $exceptionHoursList

  $output .= '<div class="exceptions">';
  if ($current_exception_found) {
    $output .= '<h4>Exceptions</h4>';
    $output .= $exceptionoutput;
  }
  else {
    $output .= '<!-- no current exceptions -->';
  }
  $output .= '</div><!-- exceptions -->';

  return $output;
}

/**
 * theme hours for an academic semester or winter/summer
 * session...uses cul_hours_default and cul_hours_exceptions
 * themes
 */
function theme_cul_hours_academicsemester($variables) {
  $academicSemesterHoursInfo = $variables['academicSemesterHoursInfo'];

  $output = '';
  if (empty($academicSemesterHoursInfo)) {
    $output .= '<p>No Hours Available for this Location</p>';
  }
  else {
    $hoursPackage = $academicSemesterHoursInfo->semesterHoursPackage;

    // strip year from tail end of packageName
    $semesterName = substr($hoursPackage->packageName, 0, -5);

    $fromDate = $hoursPackage->fromDate;
    $toDate = $hoursPackage->toDate;
    $dateCompareFormat = 'Ymd';
    $monthDayFormat = 'F j';
    $yearFormat = 'Y';

    // check to see if the end date for the semester has already passed
    // only display semesters that have not already passed
    if (date($dateCompareFormat, $toDate) >= date($dateCompareFormat)) {
      // display semester hours header
      $output .= '<div class="semesterHours">';
      $output .= '<h3>' . $semesterName . ' <em class="dateRange">' . get_formatted_time($fromDate, $monthDayFormat) . ' - ' . get_formatted_time($toDate, $monthDayFormat) . ', ' . get_formatted_date($toDate, $yearFormat) . '</em></h3>';

      // Now start displaying the regular and exception hours
      $exceptionHoursList = $academicSemesterHoursInfo->exceptionHoursList;
      if ($exceptionHoursList) {
        $lastException = array_slice($exceptionHoursList, -1);

        foreach ($lastException as $exceptionHoursInfo) {
          // check to see if we're currently in the last exception for any given semester
          // Removed this section 3/20/12 because indeed, it caused problems.
          // During Spring Break, the regular hours disappeared from several libraries'
          // display beacuse spring break happened to be the last set of exeptions for the
          // semester -- but of course, we want to display regular semester hours as well!
          //               if (date($dateCompareFormat, $exceptionHoursInfo->startDay) <=
          //                   date($dateCompareFormat)) {
          //                  if (!empty ($exceptionHoursList) and ) {
          //                     // default hours no longer apply, so display exceptions only
          //                     // TODO: this logic doesn't follow. Why assume that there isn't a time period
          //                     // with default hours after the end of the last exception?!
          //                     $exceptionHours = theme('cul_hours_exceptions', $exceptionHoursList);
          //                     $output .= $exceptionHours;
          //                  }
          //               } else {
          // display default hours first, then exceptions
          $output .= theme('cul_hours_default', array('hoursPackage' => $hoursPackage));
          if (!empty($exceptionHoursList)) {
            $exceptionHours = theme('cul_hours_exceptions', array('exceptionHoursList' => $exceptionHoursList));
            $output .= $exceptionHours;
          }
          //          }
        }
      }
      else {
        // No exceptions, just show default hours
        $output .= theme('cul_hours_default', array('hoursPackage' => $hoursPackage));
      }

      $output .= '</div><!--semesterHours-->' . "\n";
    }
  }

  return $output;
}

/**
 * theme hours for an academic year. Just iterate through
 * each semester/session in the year and call the
 * cul_hours_academicsemester theme function
 */
function theme_cul_hours_academicyear($variables) {
  $hoursInfo = $variables['hoursInfo'];
  $output = '';

  if (empty($hoursInfo)) {
    $output .= '<p>No Hours Available for this Location</p>';
  }
  else {
    $numSemesters = count($hoursInfo->academicSemesterList);
    $i = 1;
    if (isset($hoursInfo->academicSemesterList)) {
      foreach ($hoursInfo->academicSemesterList as $academicSemesterHoursInfo) {
        $output .= theme('cul_hours_academicsemester', array('academicSemesterHoursInfo' => $academicSemesterHoursInfo));
        $hoursPackage = $academicSemesterHoursInfo->semesterHoursPackage;

        // strip year from tail end of packageName
        $semesterName = substr($hoursPackage->packageName, 0, -5);

        $fromDate = $hoursPackage->fromDate;
        $dateCompareFormat = 'Ymd';

        // check to see if we've already entered the Summer Session
        // if so, let's include the hours for the following academic year
        if ($i == $numSemesters) {
          if (strtotime(date($dateCompareFormat)) - strtotime(date($dateCompareFormat, $fromDate)) < 0) {
            $location = $hoursPackage->locationName;
            $currentSummerYear = date("Y", $fromDate);
            $followingYear = $currentSummerYear + 1;
            $nextAcademicYear = $currentSummerYear . '-' . $followingYear;
            $output .= cul_hours_academicyear($location, $nextAcademicYear);
          }
        }
        $i++;
      }
    }
  }

  return $output;
}

/**
 * Implements hook_help().
 */
function cul_hours_help($path, $arg) {
  if ($path == 'admin/help#libraryhours') {
    $txt = 'The Library Hours module displays information about Library Hours';
    return '<p>' . t($txt) . '</p>';
  }
}

/* END HOOKS */

/**
 * fetch json given a url
 *
 * @param $url
 * @return json
 */
function getLibraryHoursJson($url) {

  $http_result = drupal_http_request($url);
  if ($http_result->code == 200) {
    $data = $http_result->data;
    $c = json_decode($data);
    if (empty($c)) {
      // drupal_set_message("Unable to decode json from library hours service");
    }
    return $c;
  }
  else { // Otherwise we don't have any data
    return '';
  }
}

/**
 * return a formatted date given a date object and
 * formatting string
 */
function get_formatted_date($u, $fmt) {
  if (module_exists('date_api')) {
    $start = new DateObject($u);
    $formatted_date = $start->format($fmt);
  }
  else {
    $formatted_date = t('needs date_api module!');
  }
  return $formatted_date;
}

/**
 * return a formatted time given a date object and
 * formatting string
 */
function get_formatted_time($u, $fmt) {

  $formattedTime = date($fmt, $u);
  if ($formattedTime == "12:00 am") {
    $formattedTime = "Midnight";
  }
  elseif ($formattedTime == "12:00 pm") {
    $formattedTime = "Noon";
  }

  return $formattedTime;
}

/**
 * special case formatting for Closed or Open All Day -jgr25
 */
function _cul_hours_special_timespan($openTime, $closeTime, $timeformat) {
  $output = '';
  if ($openTime == $closeTime) {
    $open = get_formatted_time($openTime, $timeformat);
    if ($open == "Midnight") {
      // special case: open and close at 12:00 AM means open all day
      $output = 'OPEN 24 HOURS';
    }
    else {
      // special case open and close at same time means closed all day
      $output = 'Closed';
    }
  }
  return $output;
}


/**
 * special case formatting for default times -jgr25
 */
function _cul_hours_format_default($prevOpen, $prevClose, $prevOverride, // previous day open close override
$thisOpen, $thisClose, $thisOverride, // current day open close override
$nextOpen, $nextClose, $nextOverride // next day open close override
) {

  $output = '';

  $hours = (object) array(
    'startTime' => $thisOpen,
    'endTime' => $thisClose,
  );

  // Check override first
  if ($thisOverride == 1) {
    $output = 'OPEN 24 HOURS';
  }
  elseif ($thisOverride == 2) {
    $output = 'CLOSED';
  }
  else {
    $timeformat = 'g:i a';
    $start = get_formatted_time($hours->startTime, $timeformat);
    $end = get_formatted_time($hours->endTime, $timeformat);

    if ($start == 'Midnight' and $prevOverride == 1) {
      // starting at Midnight after being open all day the day before
      $output = t('Closes at @time', array('@time' => $end));
    }
    elseif ($end == 'Midnight' and $nextOverride == 1) {
      // ending at Midnight before being open all day the next day
      $output = t('Opens at @time', array('@time' => $start));
    }

    if (empty($output)) {
      // normal situation with open and close times
      $output = t('@start - @finish', array('@start' => $start, '@finish' => $end));
    }
  }

  return $output;
}


/**
 * check for special case of open 24 hours.
 */
function _cul_hours_open_all_day($hours) {

  return ($hours->override == 1);

}


/**
 * check for special case of closed all day.
 */
function _cul_hours_closed_all_day($hours) {

  return ($hours->override == 2);

}

/**
 * hours test page
 * @return string html of hours test page
 */
function cul_hours_test() {

  drupal_set_title('Library Hours');
  return theme('cul_hours_test');

}

/**
 * Theme the main CUL hours and maps display.
 * @return string html output
 */
function theme_cul_hours_test() {

  global $libs, $abbrev_map;

  // Create the header and start the table
  $today = date('l, F d, Y');
  $output = "<div id='htitle'>Today's Hours</div><div id='hdate'>$today</div>";
  $output .= "<span id='showOption'><button type='button'>Show only what's open</button></span><span id='showNote'></span>";

  // Create the list of today's hours with links
  $table_content = '<ul class="hourscontent">';
  for ($i = 0; $i < count($libs); $i++) {
    $t1 = $libs[$i]['title'];
    $t1 = trim($t1);
    $t1 = str_replace('&', 'and', $t1);
    $t1string = $t1 . '<br/>' . '<span class="today">' . $libs[$i]['today'] . '</span>';
    $t1class = ($libs[$i]['open'] ? "open" : "closed");
    $t1id = "loc_" . $abbrev_map[$t1];
    // HACK ... 'Fine Arts' isn't working, probably because of the space
    if ($t1id == 'loc_Fine Arts') {
      $t1id = 'loc_FA';
    }
    $table_content .= "<li id='$t1id' class='$t1class'>" . $t1string . "</li>";
  }

  $table_content .= "</ul>";
  $output .= $table_content;

  $output .= "<span><strong>Full PDFs:&nbsp;&nbsp;</strong><a href='sites/default/files/cul_spring_hours.pdf'>Spring</a> | <a href='sites/default/files/cul_summer_hours.pdf'>Summer</a> | <a href='sites/default/files/cul_fall_hours.pdf'>Fall</a> | <a href='sites/default/files/cul_winter_hours.pdf'>Winter</a></span>";

  // Add the details div
  $output .= '<div id="details"><span class="hoursprompt">Click on a location from the list at the left to see the full semester schedule.</span></div>';

  // Add the iframe for the campus map
  // $output .= '
  //     <div id="outerdiv">
  //     <iframe id="campusmap" src="//www.cornell.edu/maps?iframe=1&hideLocList=1&hideDir=1&hideOverlays=1&zoom=15&suppressUserLoc=1" width="50%" height="550" frameborder="0"><p>The map is not appearing because the web browser in use does not support iframes.</p></iframe>
  //     </div>';

  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function cul_hours_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'cul_hours_field_hours_id' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('Library Hours listing with Open if appropriate'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('text'),
      // You can usually leave 'multiple values' as follows:
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view(). This code just passes straight
 * through to a theme function, cul_hours_formatter_FORMATTER
 * (e.g. cul_hours_formatter_cul_hours_absolute_url).
 */
function cul_hours_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('cul_hours_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'cul_hours_field_hours_id'  field formatter.
 */
function theme_cul_hours_formatter_cul_hours_field_hours_id($element) {
  if (isset($element['element']['safe_value'])) {
    $id = $element['element']['safe_value'];
    return cul_hours_dailyHoursFromId($id);
  }
}

function cul_hours_userTimeStamp() {
  // return timestamp in user's zone
  $date_string = format_date(time(), 'custom', 'F j, Y g\:H A');
  $timestamp = strtotime($date_string);
  return $timestamp;
}

function cul_hours_dailyHoursFromId($id) {
  $id = urlencode($id);
  $output = 'unknown result';
  # Hacks for 'static' library hours
  if ($id == 'Engineering') {
    $output = "24/7 study space and computing only";
  }
  elseif ($id == 'PhysSci') {
   $output = "24/7 quiet study space only";
  }
  # We really don't want to be doing a lot of calculations in a view, so use the cache
  elseif (($cache = cache_get('daily_hours_'.$id) !== FALSE) && !empty($cache->data)) {
   $output = $cache->data;
  }
  else {
    # Grab the output from the today's hours service
    $url = "http://mannservices.mannlib.cornell.edu/LibServices/showLibraryHoursToday.do?location=$id&output=json";
    $result = json_decode(file_get_contents($url));

    # override determines whether the library is open all day (1), closed all day (2),
    # or has both open and closing times (0).
    if ($result && $result->override == 1) {
      $output = "<span>Today:</span> Open all day";
      $output .= '   <span class="label label-success">Open</span>';
    }
    elseif ($result && $result->override ==2) {
      $output = "<span>Today:</span> Closed all day";
      $output .= '   <span class="label label-danger">Closed</span>';
    }
    elseif ($result) {
      $output = '<span>Today:</span> ';
      $open_now = false;
      # Check whether the library is starting open but closing during the day
      if ($result->startTime == null && $result->endTime != null) {
        $end  = date("g:i a", $result->endTime);
        $output .= "Closes at $end";
        $open_now = (cul_hours < $result->endTime);
      }
      # Check whether the library is starting closed but ending the day open
      elseif ($result->endTime == null && $result->startTime != null) {
        $start = date("g:i a", $result->startTime);
        $output .= "Opens at $start";
        $open_now = (cul_hours_userTimeStamp() > $result->startTime);
      }
      # Else normal business
      else {
        $start = date("g:i a", $result->startTime);
        $end  = date("g:i a", $result->endTime);
        $output .= "$start - $end";
        $open_now = (cul_hours_userTimeStamp() > $result->startTime && cul_hours_userTimeStamp() < $result->endTime);

        //debugging code:
        $detils = array(
          "@start" => $start,
          "@end" => $end,
          "@output" => $output,
          "@userTimestamp" => cul_hours_userTimeStamp(),
          "@open_now" => $open_now,
          );
        watchdog('cul_hours', 'Start @start; End @end; Output @output; Timestamp @userTimestamp; Open? @open_now', $details, WATCHDOG_NOTICE, 'link');
        //...debugging code
      }

      if ($open_now) {
        $output .= '   <span class="label label-success">Open</span>';
      }
      else {
        $output .= '   <span class="label label-danger">Closed</span>';
      }
    }

    // cache expires at 10 min, cron rebuilds every 5 min
    cache_set('daily_hours_'.$id, $output, 'cache', cul_hours_userTimeStamp() + (300 * 2));
  }
  return $output;
}

/**
 * Implementation of hook_cron().
 *
 * updates the library_hours cache
 * set to run every 5 min
 */
function cul_hours_cron() {
  global $abbrev_map;

  watchdog('cul_hours', 'cul_hours_cron called at @datestamp', array('@datestamp' => gmDate("Y-m-d\TH:i:s\Z")), WATCHDOG_NOTICE);

  foreach($abbrev_map as $name => $id) {
    switch ($id) {
      case 'PHYSCI':
      case 'ENGR':
        # the web service http://mannservices.mannlib.cornell.edu/LibServices/showLibraryHoursToday.do
        # responds with an error 500 for these which gets into the logs
        # avoid this here
        break;
      default:
        // clear out the current cached entry for this library
        cache_clear_all('daily_hours_'.$id, 'cache');
         // reload the cache
        $ignore = cul_hours_dailyHoursFromId($id);
        break;
    }
  }

}
